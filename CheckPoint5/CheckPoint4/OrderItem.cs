//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace CheckPoint4
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Item))]
    [KnownType(typeof(Order))]
    public partial class OrderItem: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int order_id
        {
            get { return _order_id; }
            set
            {
                if (_order_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'order_id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (Order != null && Order.order_id != value)
                        {
                            Order = null;
                        }
                    }
                    _order_id = value;
                    OnPropertyChanged("order_id");
                }
            }
        }
        private int _order_id;
    
        [DataMember]
        public int item_id
        {
            get { return _item_id; }
            set
            {
                if (_item_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'item_id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (Item != null && Item.item_id != value)
                        {
                            Item = null;
                        }
                    }
                    _item_id = value;
                    OnPropertyChanged("item_id");
                }
            }
        }
        private int _item_id;
    
        [DataMember]
        public Nullable<int> item_quantity
        {
            get { return _item_quantity; }
            set
            {
                if (_item_quantity != value)
                {
                    _item_quantity = value;
                    OnPropertyChanged("item_quantity");
                }
            }
        }
        private Nullable<int> _item_quantity;
    
        [DataMember]
        public Nullable<int> total_cost
        {
            get { return _total_cost; }
            set
            {
                if (_total_cost != value)
                {
                    _total_cost = value;
                    OnPropertyChanged("total_cost");
                }
            }
        }
        private Nullable<int> _total_cost;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Item Item
        {
            get { return _item; }
            set
            {
                if (!ReferenceEquals(_item, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (item_id != value.item_id)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _item;
                    _item = value;
                    FixupItem(previousValue);
                    OnNavigationPropertyChanged("Item");
                }
            }
        }
        private Item _item;
    
        [DataMember]
        public Order Order
        {
            get { return _order; }
            set
            {
                if (!ReferenceEquals(_order, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (order_id != value.order_id)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _order;
                    _order = value;
                    FixupOrder(previousValue);
                    OnNavigationPropertyChanged("Order");
                }
            }
        }
        private Order _order;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Item = null;
            Order = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupItem(Item previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OrderItems.Contains(this))
            {
                previousValue.OrderItems.Remove(this);
            }
    
            if (Item != null)
            {
                if (!Item.OrderItems.Contains(this))
                {
                    Item.OrderItems.Add(this);
                }
    
                item_id = Item.item_id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Item")
                    && (ChangeTracker.OriginalValues["Item"] == Item))
                {
                    ChangeTracker.OriginalValues.Remove("Item");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Item", previousValue);
                }
                if (Item != null && !Item.ChangeTracker.ChangeTrackingEnabled)
                {
                    Item.StartTracking();
                }
            }
        }
    
        private void FixupOrder(Order previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OrderItems.Contains(this))
            {
                previousValue.OrderItems.Remove(this);
            }
    
            if (Order != null)
            {
                if (!Order.OrderItems.Contains(this))
                {
                    Order.OrderItems.Add(this);
                }
    
                order_id = Order.order_id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Order")
                    && (ChangeTracker.OriginalValues["Order"] == Order))
                {
                    ChangeTracker.OriginalValues.Remove("Order");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Order", previousValue);
                }
                if (Order != null && !Order.ChangeTracker.ChangeTrackingEnabled)
                {
                    Order.StartTracking();
                }
            }
        }

        #endregion
    }
}
